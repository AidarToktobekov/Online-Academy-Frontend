import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import {ReduxProvider} from "@/redux/provider";
import React from "react";
import AppToolbar from "@/components/AppToolbar/AppToolbar";
import {cookies} from "next/headers";
import {me} from "@/redux/thunks/usersThunk";
import {useAppDispatch} from "@/redux/hooks";
import {API_URL} from "../../constant";
import ClientAuth from "@/components/ClientAuth/ClientAuth";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const cookieStore = await cookies();
  const token = cookieStore.get('accessToken');

  let user = null;

  if (token) {
    const res = await fetch(`${API_URL}/users/me`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    });

    if (!res.ok) {
      user = await res.json();
    }
  }

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ReduxProvider>
          <ClientAuth/>
            <AppToolbar/>
            {children}
        </ReduxProvider>
      </body>
    </html>
  );
}
